# -*- coding: utf-8 -*-
"""
Created on Fri Dec 13 09:06:57 2024

@author: davinah
"""

import numpy as np
import matplotlib.pyplot as plt

# Data from the table
a0 = [-1, -0.5, 0, 0.5, 1]
Relative_Exp_BE_mat = np.array([
    [1.00841170503391, 1.0158983541811, 1.04561286409119, 1.07021033608756, 1.13400029938756],
    [1.00901911578949, 1.01603819263198, 1.0446308887092, 1.07218420182045, 1.1390280883499],
    [1.01021691510098, 1.01493565256345, 1.04609018906815, 1.08639283650928, 1.16794108130518]
]) * 100

SLF_with_P3_mat = np.array([
    [0.854141029465692, 0.797799592148641, 0.724539470223261, 0.639004848752172, 0.547287245728576],
    [0.853491045424797, 0.796933035809279, 0.724000824311827, 0.639670553312949, 0.549958957824782],
    [0.852718125933177, 0.795745568870581, 0.722609646736223, 0.638116441086251, 0.548311368903195]
]) * 100

SLF_without_P3_mat = np.array([
    [0.859540681304393, 0.804981973646229, 0.726629636466003, 0.622469061717504, 0.501031982132945],
    [0.859533378073897, 0.804976360843637, 0.726628817357403, 0.622471459150581, 0.501033945708809],
    [0.859490122717993, 0.804755846190291, 0.725767725875656, 0.619590530471524, 0.494559655339016]
]) * 100

DLPoverwithoutP3_mat = np.array([
    [98.47040988, 78.69560203, 63.21626291, 48.73097112, 36.5183233],
    [98.34671449, 78.92963812, 63.30544569, 49.39804665, 36.93760606],
    [97.90363748, 78.99935866, 63.12488862, 49.44916672, 37.10690776]
]) / np.array([
    [97.7358362836889, 79.7380443220774, 61.1781676232535, 45.3275996264786, 32.1632846196323],
    [97.7366263469659, 79.7395630370639, 61.1776113619557, 45.3273227402063, 32.1628937462548],
    [97.7237321343602, 79.7056856311274, 61.1101333099684, 44.9635669273883, 31.3486920929242]
]) * 100

SBD_overwithoutP3_mat = np.array([
    [99.99167971, 81.1354022, 64.39666897, 50.41518562, 37.9423306],
    [99.91027422, 81.43117188, 64.51694321, 50.62816344, 38.42877126],
    [99.72207148, 81.62057335, 64.6322845, 50.87819241, 38.49435873]
]) / np.array([
    [97.7358362836889, 79.7380443220774, 61.1781676232535, 45.3275996264786, 32.1632846196323],
    [97.7366263469659, 79.7395630370639, 61.1776113619557, 45.3273227402063, 32.1628937462548],
    [97.7237321343602, 79.7056856311274, 61.1101333099684, 44.9635669273883, 31.3486920929242]
]) * 100

SBD_ke_overwithoutP3_mat = np.array([
    [99.84654816, 80.31603889, 64.6576276, 50.12304081, 38.30419385],
    [99.87177383, 80.44346056, 65.1935018, 50.54749441, 38.47549935],
    [99.7460361, 80.18677611, 65.66310753, 50.49775133, 38.41772209]
]) / np.array([
    [97.7358362836889, 79.7380443220774, 61.1781676232535, 45.3275996264786, 32.1632846196323],
    [97.7366263469659, 79.7395630370639, 61.1776113619557, 45.3273227402063, 32.1628937462548],
    [97.7237321343602, 79.7056856311274, 61.1101333099684, 44.9635669273883, 31.3486920929242]
]) * 100

SLF_DLP_mat = np.array([
    [0.8775, 0.8525, 0.83125, 0.81375, 0.8125],
    [0.87375, 0.84875, 0.83125, 0.8175, 0.80625],
    [0.87, 0.84625, 0.8325, 0.80875, 0.81125]
]) * 100

SLF_SBD_mat = np.array([
    [0.87625, 0.84125, 0.795, 0.7575, 0.70875],
    [0.875, 0.84375, 0.7975, 0.7625, 0.715],
    [0.87375, 0.8475, 0.8, 0.77, 0.72125]
]) * 100

SLF_SBD_ke_mat = np.array([
    [0.865, 0.8175, 0.77625, 0.71125, 0.65625],
    [0.8675, 0.8225, 0.78375, 0.7175, 0.65875],
    [0.8675, 0.81875, 0.79625, 0.7175, 0.66625]
]) * 100

xticksvector = [r'Strong, $a_0=-1$', '', '', '', r'Weak, $a_0=1$']

#New Values with tau3=0.2
a0 = np.arange(-5,6)
Relative_Exp_BE_mat = np.array([[1.01342036052691,1.02272267419149,1.03890604784085,1.06748855604448,1.1187273047218,1.20808783745992,1.33543849355179,1.45237073645895,1.52431860624758,1.56044537690112,1.57615216038751],
    [1.01395635388727,1.0236435877871,1.04050460954845,1.07033092739469,1.12394905009086,1.21771556231485,1.35205724437118,1.47662400934462,1.55377791464695,1.592483767997,1.60932397383154],
    [1.01451367698363,1.02460215088593,1.04217085734791,1.07330146291509,1.12943145033711,1.22787511261113,1.36969974750261,1.50254439451606,1.58539867865808,1.62692992479617,1.64501771207896]
]) * 100

pol_BE = np.array([[1.00664396307222,1.00896101933522,1.03192293025081,1.05607292675998,1.09710728551415,1.21820947668801,1.36227477471469,1.45272327361462,1.6186496177988,1.38830072076753,1.45138772934102],
                   [1.00771314302306,1.00997921590538,1.03071357275549,1.05739003680364,1.10434232825279,1.22953523991592,1.38302115584957,1.47430035323477,1.65208580221363,1.41008402853231,1.47471754223424],
                   [1.00955200474665,1.01210823391816,1.03257889918829,1.05911529559981,1.11211130385109,1.23518770765864,1.40602801968243,1.4977272826699,1.65108872940819,1.4424212163389,1.5144155801261]])*100

SLF_with_P3_mat = np.array([[0.929481199933967,0.903035723081545,0.868058940957826,0.821967440207087,0.759029608316851,0.665666716278382,0.519990760993182,0.32818862740324,0.163111705445946,0.0690041279539913,0.0269018845660045],
    [0.927714388210851,0.900667716536022,0.865049225845926,0.818370886977103,0.755080250727309,0.662062907425828,0.517782957175252,0.327568499126651,0.16302937265475,0.0689949179162532,0.0269002600616556],
    [0.925890066260651,0.898221963712938,0.861949468433019,0.814674291874682,0.75102866131058,0.658354586795688,0.515494873482164,0.326924728224438,0.162945341839302,0.0689856908398137,0.0268985895341265]
]) * 100

SLF_without_P3_mat = np.array([[0.976281850352378,0.967186059709123,0.951529713088361,0.921942390180729,0.860409178461542,0.728797894754172,0.504441301921086,0.275009190940572,0.124807494908639,0.0504847397404059,0.0192976156396858],
    [0.976261991639716,0.967141321617829,0.95141832819418,0.921638130576529,0.859535742181126,0.726632839013353,0.501053758367227,0.272056678919043,0.123082591632035,0.049700406574439,0.0189822122964521],
    [0.976242872340986,0.967094744806714,0.951300924275532,0.921321703651703,0.85861312264631,0.724340340194899,0.497473880181926,0.268961666266778,0.12128043217929,0.0488832097540043,0.0186541777634541]
]) * 100

SLF_DLP_mat = np.array([[0.8525 , 0.84875, 0.85125, 0.83625, 0.845  , 0.84375, 0.75625, 0.4825 , 0.23   , 0.0825 , 0.03375],
                       [0.855  , 0.84875, 0.85625, 0.835  , 0.8475 , 0.84875, 0.765  , 0.48375, 0.2325 , 0.0825 , 0.03375],
                       [0.855  , 0.85125, 0.855  , 0.84125, 0.8475 , 0.8375 , 0.77   , 0.48875, 0.235  , 0.0825 , 0.03375]])*100

DLPoverwithoutP3_mat = np.array([[261.56209411, 220.9004631 , 183.50389066, 144.77100629, 109.53755799,  75.00025647,  44.53930461,  23.70836895, 10.09736054,   3.54119672,   1.40682118],
       [262.36383217, 221.13543257, 184.55645365, 144.87701504, 110.04716396,  75.65477092,  44.72406454,  23.77212574, 10.15641078,   3.54182128,   1.40703583],
       [262.32958166, 221.82057573, 184.47212076, 145.88628358, 110.54332533,  75.40815084,  44.82826382,  23.92773742, 10.21404649,   3.54247419,   1.41944587]])/ np.array([
    [278.048319756785,231.550188437425,185.926320720736,141.643305444439,99.6850002000091,62.2436522971279,33.2524469789914,15.2991350009085,6.30545884822985,2.43725419658976,0.914389245092496],
    [277.957580035333,231.415596538545,185.738416766953,141.386323867966,99.3548121899466,61.8928597938853,32.9638768672786,15.1191593683748,6.21700502683193,2.4002407335085,0.900010891210842],
    [277.862886369709,231.275123871966,185.542016644356,141.117282593731,99.0084106273114,61.5248060649714,32.6614876584614,14.930918751202,6.12465661544099,2.3616473724543,0.885022526440692]
]) * 100

SBD_ke_overwithoutP3_mat = np.array([[279.57365836, 233.9479576 , 191.05892743, 150.96116683,
        109.87927289,  75.21223281,  46.49055387,  23.98300106,
         10.01374298,   3.49277561,   1.41426472],
       [279.39064921, 233.70287846, 191.09175484, 151.47023617,
        109.0592746 ,  75.56064125,  46.19695557,  24.11334325,
         10.04884423,   3.49383838,   1.4145716 ],
       [279.77453561, 233.36182985, 191.19619233, 151.47206407,
        109.07644045,  76.22418577,  46.30451353,  24.05427437,
         10.05651253,   3.49493956,   1.42726537]])/ np.array([
    [278.048319756785,231.550188437425,185.926320720736,141.643305444439,99.6850002000091,62.2436522971279,33.2524469789914,15.2991350009085,6.30545884822985,2.43725419658976,0.914389245092496],
    [277.957580035333,231.415596538545,185.738416766953,141.386323867966,99.3548121899466,61.8928597938853,32.9638768672786,15.1191593683748,6.21700502683193,2.4002407335085,0.900010891210842],
    [277.862886369709,231.275123871966,185.542016644356,141.117282593731,99.0084106273114,61.5248060649714,32.6614876584614,14.930918751202,6.12465661544099,2.3616473724543,0.885022526440692]
]) * 100

SBD_overwithoutP3_mat = np.array([[278.91809706, 234.12915517, 191.87150648, 151.07435055,
        113.60751138,  75.55100059,  45.83083298,  24.25917001,
         10.1180569 ,   3.54124006,   1.40680768],
       [278.91985408, 233.97398667, 192.05701001, 150.78798351,
        113.44214392,  75.41610155,  45.85877599,  24.48987455,
         10.17822785,   3.54184372,   1.40716677],
       [278.94313775, 232.84003465, 192.22703921, 151.06639694,
        112.75469279,  76.08931443,  46.05746666,  24.45173147,
         10.24033789,   3.54248686,   1.41964464]])/ np.array([
    [278.048319756785,231.550188437425,185.926320720736,141.643305444439,99.6850002000091,62.2436522971279,33.2524469789914,15.2991350009085,6.30545884822985,2.43725419658976,0.914389245092496],
    [277.957580035333,231.415596538545,185.738416766953,141.386323867966,99.3548121899466,61.8928597938853,32.9638768672786,15.1191593683748,6.21700502683193,2.4002407335085,0.900010891210842],
    [277.862886369709,231.275123871966,185.542016644356,141.117282593731,99.0084106273114,61.5248060649714,32.6614876584614,14.930918751202,6.12465661544099,2.3616473724543,0.885022526440692]
]) * 100
           
SLF_SBD_mat =  np.array([[0.965  , 0.9525 , 0.9475 , 0.92875, 0.9075 , 0.81375, 0.685  ,
        0.4775 , 0.23   , 0.0825 , 0.03375],
       [0.965  , 0.95125, 0.94875, 0.9275 , 0.9025 , 0.81   , 0.68625,
        0.48375, 0.2325 , 0.0825 , 0.03375],
       [0.96375, 0.9475 , 0.94875, 0.92875, 0.8975 , 0.8175 , 0.68875,
        0.485  , 0.235  , 0.0825 , 0.03375]])*100
 
SLF_SBD_ke_mat =  np.array([[0.96375, 0.94875, 0.93625, 0.92625, 0.86375, 0.79125, 0.67125,
        0.45125, 0.2225 , 0.08   , 0.03375],
       [0.9625 , 0.94625, 0.93625, 0.9275 , 0.86125, 0.795  , 0.665  ,
        0.45625, 0.2225 , 0.08   , 0.03375],
       [0.9625 , 0.94375, 0.93625, 0.925  , 0.86   , 0.80125, 0.66625,
        0.455  , 0.2225 , 0.08   , 0.03375]])*100


xticksvector = [r'Strong, $a_0=-5$', '', '', '', '', '', '', '', '', '', r'Weak, $a_0=5$']


for i, a3 in enumerate([0.4, 0.6, 0.8]): #0.4, 0.6, 0.8
    Relative_Exp = Relative_Exp_BE_mat[i, :]
    SLF_with_P3 = SLF_with_P3_mat[i, :]
    SLF_without_P3 = SLF_without_P3_mat[i, :]
    relexp_DLP = DLPoverwithoutP3_mat[i, :]
    relexp_SDPD = SBD_overwithoutP3_mat[i, :]
    relexp_SDPD_ke = SBD_ke_overwithoutP3_mat[i, :]
    SLF_DLP = SLF_DLP_mat[i, :]
    SLF_SDPD = SLF_SBD_mat[i, :]
    SLF_SDPD_ke = SLF_SBD_ke_mat[i, :]
    relexpol_BE = pol_BE[i,:]

    
    plt.figure(figsize=(10, 6))
    plt.rcParams['font.size'] = 14
    
    # Plot revenue lines
    plt.plot(a0, Relative_Exp, color='cyan', marker='o', linestyle='dashdot', linewidth=1.5, markersize=5, label='Relative Expected Revenue (BE)')
    plt.plot(a0, relexpol_BE, color='cyan',marker='o',linestyle='-',linewidth=1.5, markersize=5, label='Relative Expected Revenue (Policy BE)')
    plt.plot(a0, relexp_DLP, color='violet', marker='x', linestyle='-', linewidth=1.5, markersize=5, label='Relative Expected Revenue (Policy DPP)')
    plt.plot(a0, relexp_SDPD, color='forestgreen', marker='*', linestyle='-', linewidth=1.5, markersize=5, label='Relative Expected Revenue (Policy DPD)')
    plt.plot(a0, relexp_SDPD_ke, color='red', marker='+', linestyle='-', linewidth=1.5, markersize=5, label='Relative Expected Revenue (Policy DPD-Benchmark)')

    # Plot SLF lines with dashed style
    plt.plot(a0, SLF_with_P3, '--', color='cyan', marker='o', linewidth=1.5, markersize=5, label='SLF (BE) with Extra Seats')
    plt.plot(a0, SLF_without_P3, '--', color='navy', marker='.', linewidth=1.5, markersize=5, label='SLF (BE) without Extra Seats')
    plt.plot(a0, SLF_DLP, '--', color='violet', marker='x', linewidth=1.5, markersize=5, label='SLF (Policy DPP) with Extra Seats')
    plt.plot(a0, SLF_SDPD, '--', color='forestgreen', marker='*', linewidth=1.5, markersize=5, label='SLF (Policy DPD) with Extra Seats')
    plt.plot(a0, SLF_SDPD_ke, '--', color='red', marker='+', linewidth=1.5, markersize=5, label='SLF (Policy DPD-Benchmark) with Extra Seats')


    plt.xlabel('Demand')
    plt.ylabel('Percentage')
    # plt.title(f'Relative Expected Revenue by selling Extra Seats and SLF over Demand Ratio (HOMOG) for a3={a3:.1f}')
    plt.xticks(a0, xticksvector)
    plt.legend(fontsize=9.5,loc='best',ncol=2)

    plt.xlim(min(a0) - 0.3, max(a0) + 0.3)
    plt.ylim(min(min(Relative_Exp), min(SLF_with_P3), min(SLF_without_P3)) - 5,
             max(max(Relative_Exp), max(SLF_with_P3), max(SLF_without_P3),
                 max(relexp_DLP), max(relexp_SDPD), max(relexp_SDPD_ke)) + 80)

    plt.savefig(f'Figure7_a3_{a3:.1f}_allin.png',dpi = 400)



